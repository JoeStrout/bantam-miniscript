import "mapUtil"

globals.TokenType = {}
for _ in ("LEFT_PAREN RIGHT_PAREN COMMA ASSIGN PLUS MINUS ASTERISK SLASH " +
"CARET TILDE BANG QUESTION COLON NAME EOF").split
	TokenType[_] = _
end for

_punctuators = {
    TokenType.LEFT_PAREN: "(",
    TokenType.RIGHT_PAREN: ")",
    TokenType.COMMA: ",",
    TokenType.ASSIGN: "=",
    TokenType.PLUS: "+",
    TokenType.MINUS: "-",
    TokenType.ASTERISK: "*",
    TokenType.SLASH: "/",
    TokenType.CARET: "^",
    TokenType.TILDE: "~",
    TokenType.BANG: "!",
    TokenType.QUESTION: "?",
    TokenType.COLON: ":",
}

// punctuator:
// Gets the text of a punctuator token.
// 
// If the TokenType represents a punctuator (i.e. a token that can split an
// identifier like '+', this will get its text.
globals.punctuator = function(tokenType)
	return _punctuators.get(tokenType, null)
end function

// Token:
// A simple token class. These are generated by Lexer and consumed by Parser.
globals.Token = {}
Token.type = ""
Token.text = ""

Token.punctuator = function()
	return punctuator(self.type)
end function

// Token factory function.
globals.token = function(type, text=null)
	result = new Token
	result.type = type
	result.text = text
	return result
end function
